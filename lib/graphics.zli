val unsafe open_graph : string -> unit
val unsafe close_graph : unit -> unit
val unsafe set_window_title : string -> unit
val unsafe clear_graph : unit -> unit
val size_x : unit -> int
val size_y : unit -> int
type color
val rgb : int * int * int -> color
val unsafe set_color : color -> unit
val background : color
val foreground : color
val black : color
val white : color
val red : color
val green : color
val blue : color
val yellow : color
val cyan : color
val magenta : color
val unsafe plot : int * int -> unit
val unsafe plots : (int * int) array -> unit
val point_color : int * int -> color
val unsafe moveto : int * int -> unit
val unsafe rmoveto : int * int -> unit
val current_x : unit -> int
val current_y : unit -> int
val current_point : unit -> int * int
val unsafe lineto : int * int -> unit
val unsafe rlineto : int * int -> unit
val unsafe curveto : (int * int) * (int * int) * (int * int) -> unit
val unsafe draw_rect : int * int * int * int -> unit
val unsafe draw_poly_line : (int * int) array -> unit
val unsafe draw_poly : (int * int) array -> unit
val unsafe draw_segments : (int * int * int * int) array -> unit
val unsafe draw_arc : int * int * int * int * int * int -> unit
val unsafe draw_ellipse : int * int * int * int -> unit
val unsafe draw_circle : int * int * int -> unit
val unsafe set_line_width : int -> unit
val unsafe draw_char : char -> unit
val unsafe draw_string : string -> unit
val unsafe set_font : string -> unit
val unsafe set_text_size : int -> unit
val text_size : string -> int * int
val unsafe fill_rect : int * int * int * int -> unit
val unsafe fill_poly : (int * int) array -> unit
val unsafe fill_arc : int * int * int * int * int * int -> unit
val unsafe fill_ellipse : int * int * int * int -> unit
val unsafe fill_circle : int * int * int -> unit
type image
val transp : color
val make_image : color array array -> image 
val dump_image : image -> color array array 
val draw_image : image * int * int -> unit
val get_image : int * int * int * int -> image
val create_image : int * int -> image 
val unsafe blit_image : image * int * int -> unit
type status =
  { mouse_x : int;              (** X coordinate of the mouse *)
    mouse_y : int;              (** Y coordinate of the mouse *)
    button : bool;              (** true if a mouse button is pressed *)
    keypressed : bool;          (** true if a key has been pressed *)
    key : char;                 (** the character for the key pressed *) 
  }
type event =
    Button_down                 (** A mouse button is pressed *)
  | Button_up                   (** A mouse button is released *)
  | Key_pressed                 (** A key is pressed *)
  | Mouse_motion                (** The mouse is moved *)
  | Poll                        (** Don't wait; return immediately *)
val unsafe wait_next_event : event list -> status 
val mouse_pos : unit -> int * int
val button_down : unit -> bool
val read_key : unit -> char
val key_pressed : unit -> bool
val sound : int * int -> unit 
val unsafe auto_synchronize : bool -> unit
val unsafe synchronize : unit -> unit 
val unsafe display_mode : bool -> unit 
